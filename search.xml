<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python3环境配置]]></title>
    <url>%2F2018%2F12%2F26%2FPython3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、软件安装&amp;配置1.安装软件 Anaconda：已包含python，不需要再另外安装python，已安装的需要卸掉 PyCharm：用作编译器 2.开发环境配置 使用命令提示框(cmd)在环境变量中添加Python目录，输入 path=%path%;C:\Python 直接输入 python 检验是否已正确配置 sublime text3编辑教程Sublime Text3配置在可交互环境下运行python快捷键 注意：如果使用编辑器，需要设置 py 文件存储的格式为 UTF-8，否则会出现错误信息： 12SyntaxError: (unicode error) ‘utf-8’ codec can’t decode byte 0xc4 in position 0:invalid continuation byte Pycharm 设置步骤：进入 file &gt; Settings，在输入框搜索 encoding找到 Editor &gt; File encodings，将 IDE Encoding 和 Project Encoding 设置为 utf-8 二、其他参考材料 Python 3 教程 Pycharm简单使用教程 路径：path=%path%;C:\ProgramData\Anaconda3 在Pycharm中使用GitHub 搭建markdown图床-腾讯云COS 腾讯云COS-本地图片上传]]></content>
      <tags>
        <tag>环境配置</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo&git配置]]></title>
    <url>%2F2018%2F11%2F23%2FHexo%26git%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、软件下载&amp;安装1.git配置git主页 git下载 github下载 下载安装 git 下载安装并配置 github 2.环境变量右击此电脑 → 属性 → 高级系统设置 → 环境变量 → 在系统变量中找到 path，添加： 安装目录\cmd\git.exe。如：C:\Program Files\Git\cmd\git.exe 安装目录\bin。如：C:\Program Files\Git\bin 安装目录\usr\bin。如：C:\Program Files\Git\usr\bin 使用 SSH 连接 GitHub 默认情况下，用户的 SSH 密钥存储在 ~/.ssh 目录下面。 创建 SSH Key 的命令行如下： 1ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 字母大小写、空格、横杆，必须和上面一致，否则会报错 3.Hexo参考资料：Hexo主页Hexo常用命令笔记Hexo+Github最完整的配置教程 配置、建站、部署详见以上参考材料的连接，以下说明可能会踩坑的地方。 下载安装 Node.js 注意：选择稳定版本！不要设置自动更新！否则可能会出现电脑无限重启的情况 安装完之后，用 Git Bash 打开窗口，使用 npm 安装 Hexo 1npm install -g hexo-cli 首次体验 Hexo 可能会报错，体验操作如下 12hexo g //部署hexo s //预览 然后这里会提示： 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 用浏览器打开 http://0.0.0.0:4000/ 可能会刷不出来！原因是： 电脑端口被占用了–福昕阅读器 需要修改端口才能访问，命令如下： 1hexo s -p 5000 用git方式部署 1hexo d //发布 注意一定要先在git上建立一个项目，项目名称必须是yourcount.github.io，否则在执行命令行时一定会报错。 发布之前一定要预览，确认无误之后再发布。发布完成后无法再修改，只能删掉重新发布。 部署之后，打开网页https://yourcount.github.io/即可查看。 二、撰写文章可使用 Typora 编写 Markdown 文章 1.创建文章 在站点文件夹中打开 Git Base，用指令新建 .md 文件 在站点文件夹直接使用 Typora 新建 .md 文件 站点路径：source/_post 1hexo new &quot;title_name&quot; 2.插入目录直接插入 [TOC] 目录，但 hexo 框架中自带目录，所以没必要添加 3.设置模板使用指令创建文章的好处，是可以设置模板。Hexo 会根据 /scaffolds/post.md 模板文件进行初始化。以下分别是 标题、时间、标签、分类 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: 示例： 1234title: Titledate: YYYY-MM-DD HH:MM:SStags: [tag1, tag2, ...]categories: category 注意：属性和属性之间需要有一个空格，否则会解析错误 4.Hexo 首页显示在文章中使用&lt;!--more--&gt;标志，在 Hexo 框架博客的首页就只会显示文章标志前面的内容。 三、设置主题其中有些主题优化的好文：Hexo-Next-主题优化 1Hexo-Next-主题优化 2Hexo-Next-主题优化 3Hexo-Next-主题优化 4 1.安装使用 git clone 的方法，在 Next 的 安装说明 中有其他安装方法 1git clone https://github.com/iissnan/hexo-theme-next themes/next 2.设置主题在 hexo根目录 下的配置文件config.yml里设置主题 1theme: next 接下来配置主题内容，所有内容都在 themes/next 文件夹下的 config.yml 文件里修改。 官方文档里写的是有些配置需要将一部分代码添加到配置文件中，但其实看配置文件就会发现，有很多功能都已经放在配置文件里了，只需要取消注释，把需要的相关信息补全即可使用。 3.创建标签目录hexo初始是没有标签目录的需要自己创建，不创建会404 1hexo new page tags 创建完成后,打开 you-site/source/tags 的 index.md ,修改如下 12345---title: #页面主题date: 2017-08-18 15:00:55 #当前创建文件时间type: &quot;tags&quot; # 设置页面类型--- 4.链接样式打开 themes\next\source\css\_common\components\post\post.styl下添加代码 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 5.“本文结束”标记配置参考链接：“本文结束”参考链接 四、第三方插件1.Hexo-adminHexo-admin插件允许我们直接在本地页面上修改文章内容。下载指令： 1npm i hexo-admin --save 登录 http://localhost:4000/admin 即可看到我们所有的文章内容，并且在可视化界面中操作文章内容 2.本地搜索1npm install hexo-generator-searchdb --save 3.统计功能1npm i --save hexo-wordcount 打开themes/next下的_config.yml，修改post_wordcount 1234567891011# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true #字数统计 wordcount: true #预览时间 min2read: true #总字数,显示在页面底部 totalcount: false separated_meta: true]]></content>
      <tags>
        <tag>环境配置</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
